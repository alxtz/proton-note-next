{
  "note_id_0": {
    "title": "Proton Calendar",
    "encryptedMd": "Proton Calendar built with React.\n>**⚠ If you use Windows plz follow this document before anything else [how to prepare Windows](https://github.com/ProtonMail/proton-shared/wiki/setup-windows)**\n## Basic installation\n> :warning: if you are a proton dev, you will need the file `appConfig.json`\nTo set up the project, follow the steps below:\n1. Clone the repository\n2. `$ npm ci`\n3. `$ npm start`\nIt's going to create a server available on https://localhost:8080\n> Here on the port 8081 as the 8080 was not available. We auto detect what is available.\n## Commands\n- `$ npm start`\nRun develop server with a login page (mode standalone). It's going to run a server on the port **8080** if available.\n> If it is not available we auto detect what is available\n- `$ npm test`\nRun the tests\n\n- `$ npm run lint`\nLint the sources via eslint\n- `$ npm run pretty`\nPrettier sources (we have a hook post commit to run it)\n- `$ npm run check-types`\nValidate TS types\n- `$ npm run bundle`\nCreate a bundle ready to deploy (prepare app + build + minify)\n[more informations](https://github.com/ProtonMail/proton-bundler)\n- `$ npm run build`\nBuild the app (build + minify). Bundle will run this command.\n- `$ npm run build:standalone`\nSame as the previous one BUT with a login page. When we deploy live,the login state is on another app.But when we only deploy this app when we dev, we need to be able to login.\n- `$ npm run deploy` and `$ npm run deploy:standalone`\nIt's to deploy to a branch `deploy-branch`. A bundle based on `build` or `build:standalone`.\nFlags:\n- `--api <key>`: type of api to use for deploy ex: blue,dev,proxy,prod\n- `--branch  <deploy-branch>`: target for the subdomain to deploy\n[more informations](https://github.com/ProtonMail/proton-bundler)\n- `$ npm run i18n:validate**`\nValidate translations (context, format etc.)\n## Create a new version\nWe use the command [npm version](https://docs.npmjs.com/cli/version)"
  },
  "note_id_1": {
    "title": "Design System",
    "encryptedMd": "Proton Design system, for all Proton Projects: https://design-system.protontech.ch/\n## Installation\nBe sure to have Ruby on your computer.\nFor installing Jekyll on Windows, you can [follow this tutorial](https://jekyllrb.com/docs/installation/windows/#installation-via-bash-on-windows-10), but stop before installing Jekyll with `gem install jekyll bundler`: it won't install the right Jekyll version according to needed dependency.\nYou may encounter an issue using `gem` without `sudo`. In this case, [this should solve the problem](https://github.com/jekyll/jekyll/issues/7594#issuecomment-509839929).\nThen:\n```sh\ngem install bundler\nbundle install\n# if livereloading does not work\ngem uninstall eventmachine\ngem install eventmachine --platform ruby\n# to check versions jekyll -v\nruby -v\ngem -v\n```\n## Development\n```sh\njekyll serve --livereload\n```\nYou may prefix command by `bundle exec`, example: `bundle exec jekyll serve --livereload`\n## Building for prod\n```sh\njekyll build --config _config_prod.yml\n```\nGoes to `_site` and can be exported to Netlify if you want to do it manually.\nActually, each commit/merge on `master` is deployed automatically to Netlify.\n## CSS structure\n- __reusable-components__: a set of files/framework/etc. that can be used __on every project__.\n- __pm-styles__: styles used __for ProtonMail V4-style only__.\n- __pv-styles__: styles coming from <strong>ProtonVPN</strong>.\n- __react-styles__: styles coming from <strong>ProtonVPN</strong>.\n- __design-system-website__: styles for global interface, including styles only needed to make this website work properly"
  },
  "note_id_2": {
    "title": "ProtonMail Web Client",
    "encryptedMd": "Official AngularJS web client for the [ProtonMail secure email service](https://protonmail.com). ProtonMail also makes use of [OpenPGPjs](https://github.com/openpgpjs/openpgpjs) as our message cryptography is PGP compliant.\n## Translation\n[![Crowdin](https://d322cqt584bo4o.cloudfront.net/protonmail/localized.svg)](https://crowdin.com/project/protonmail)\nWe are currently working with our community to localize ProtonMail from English to most of the world's major languages. If you're interested in being part of this translation project, send us an email to contact@protonmail.com with the subject line \"ProtonMail Translation Project [Your Language]\" and we will offer you more information about it.\n>**⚠ If you use Windows plz follow this document before anything else [how to prepare Windows](https://github.com/ProtonMail/proton-shared/wiki/setup-windows)**\n## Basic Installation\n- `npm install`\n- `npm start`\n> To run the app without babel `npm run start:raw`\n### dependencies\n- Node.js >= v12 (LTS)\n- npm 6\n- git\n### Error with Mac\nYou need to install a few dep in order to be able to deploy\n```sh\nbrew install libpng\n```\n> or `brew upgrade libpng` if you already have the lib\n### For Windows\nIf you use Windows, you will need to have bash on your computer in order to execute everything ex:\n- run tests\n- deploy\n- etc.\n1. Install bash then check the path of bash ex: `C:\\Program Files\\git\\bin\\bash.exe\"`\n2. `npm config set script-shell \"C:\\Program Files\\git\\bin\\bash.exe\"`\n3. :popcorn:\n[More informations](https://stackoverflow.com/questions/23243353/how-to-set-shell-for-npm-run-scripts-in-windows)\n#### If you have docker, and prefer to not install node (or anything else) locally\n- `make start` to start the app on a container (use `make localurl` to find the url where it's running)\n- `make test` to build the app (actual tests are still to come)\nThere is a very good chance you won't be able to use the app locally because of various security headers and such. But you should be able to get the code running enough to poke around and inspect it.\nWe are still in Beta and will have a more refined build process, installation instructions, unit tests, and all that good stuff once we exit Beta.\n## Development\nWe are very open to bug reports via Issues as well as Pull Requests.\n### CI build - no minify\n`npm run build`\n> Same as `npm start` use --api to change the default api\n### CI build for e2e\n`npm run build:ci`\n> Same as `npm start` use --api to change the default api\n### Custom command\n```\nnpx appComponent\nnpm run create\nnpm run create:test\n```\ncf [Component Generator](https://github.com/ProtonMail/componentGenerator)\n## Deploy\n1. Create a new version + tag => `npm version (patch|minor|major)`.\n2. Deploy via npm `npm run deploy -- --api=X --branch=Y`.\n- `X` is the API version available in `API_TARGETS` in the `env/config.js` file\n- `Y` can be `deploy-dev`, `deploy-beta`, `deploy-prod-a` or `deploy-prod-b`.\nEach `deploy-<NAME>` will be available at `<NAME>.protonmail.com`.\n> `npm run deployProd` will deploy the bundle for both prod, old, dev and tor\n### CLI Flags\n- `--branch` : Deploy branch dest\n- `--api` : Set an API for the app (_dev, live, etc._)\n- `--debug`: turn on debug mode for the command (default false)\n- `--i18n`: Force sync translations (default false)\n## I18n à la demande\n> Extract translation keys\n```sh\nnpm run i18n:extract\n```\n## Release notes\n### Generate the file CHANGELOG.md\nThe command is going to generate a new entry inside the file `./CHANGELOG.md`. It works with [semver](https://semver.org/). You set which kind of entry you want (_patch_, _minor_ or _major_) and it's going to add it inside the file.\n```sh\nnpm run releaser:unshift <patch|minor|major>\n```\n> :information_source:  It won't create a new version/git tag\nex: today version 3.16.5\n```md\n# [3.16.5] - 2019-10-01\n[...]\n```\n`$ npm run releaser:unshift minor`\nOutput:\n```md\n# [3.17.0] - 2019-10-01\n[...]\n# [3.16.5] - 2019-10-01\n[...]\n```\n### Extract markdown\n*NOTE: In order to generate the release notes you need to set the `RELEASER_GH_TOKEN` environment variable.*\nTo generate release notes for the latest version (tag), run the following command:\n```sh\nnpm run releaser:extract\n```\nTo generate release notes for a specific version (tag), run:\n```sh\nnpm run releaser:extract -- --tag v3.12.24\n```\nThe release notes are outputted to `stdout`. Those notes have to be manually inserted to `CHANGELOG.md`.\nIt is also possible to run the following command to automatically unshift the output from releaser into `CHANGELOG.md`\n```sh\nnpm run releaser:unshift\n```"
  }
}
